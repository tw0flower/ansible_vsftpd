# Allow anonymous FTP? (Beware - allowed by default if you comment this out).
anonymous_enable={{ "YES" if vsftpd_anonymous_enable else "NO" }}
#
# Uncomment this to allow local users to log in.
local_enable={{ "YES" if vsftpd_local_enable else "NO" }}
#
# Uncomment this to enable any form of FTP write command.
write_enable={{ "YES" if vsftpd_write_enable else "NO" }}
#
# Default umask for local users is 077. You may wish to change this to 022,
# if your users expect that (022 is used by most other ftpd's)
local_umask={{ vsftpd_local_umask }}
#
# Uncomment this to allow the anonymous FTP user to upload files. This only
# has an effect if the above global write enable is activated. Also, you will
# obviously need to create a directory writable by the FTP user.
# When SELinux is enforcing check for SE bool allow_ftpd_anon_write, allow_ftpd_full_access
anon_upload_enable={{ "YES" if vsftpd_anon_upload_enable else "NO" }}
#
# Uncomment this if you want the anonymous FTP user to be able to create
# new directories.
anon_mkdir_write_enable={{ "YES" if vsftpd_mkdir_write_enable else "NO" }}
#
# Activate directory messages - messages given to remote users when they
# go into a certain directory.
dirmessage_enable={{ "YES" if vsftpd_dirmessage_enable else "NO" }}
#
# Activate logging of uploads/downloads.
xferlog_enable={{ "YES" if vsftpd_xferlog_enable else "NO" }}
#
# Make sure PORT transfer connections originate from port 20 (ftp-data).
connect_from_port_20={{ "YES" if vsftpd_connect_from_port_20 else "NO" }}
#
# If you want, you can arrange for uploaded anonymous files to be owned by
# a different user. Note! Using "root" for uploaded files is not
# recommended!
chown_uploads={{ "YES" if vsftpd_chown_uploads else "NO" }}
chown_username={{ vsftpd_chown_username }}
#
# You may override where the log file goes if you like. The default is shown
# below.
xferlog_file={{ vsftpd_xferlog_file }}
#
# If you want, you can have your log file in standard ftpd xferlog format.
# Note that the default log file location is /var/log/xferlog in this case.
xferlog_std_format={{ "YES" if vsftpd_xferlog_std_format else "NO" }}
#
# You may change the default value for timing out an idle session.
idle_session_timeout={{ vsftpd_idle_session_timeout }}
#
# You may change the default value for timing out a data connection.
data_connection_timeout={{ vsftpd_data_connection_timeout }}
#
# It is recommended that you define on your system a unique user which the
# ftp server can use as a totally isolated and unprivileged user.
nopriv_user={{ vsftpd_nopriv_user }}
#
# Enable this and the server will recognise asynchronous ABOR requests. Not
# recommended for security (the code is non-trivial). Not enabling it,
# however, may confuse older FTP clients.
async_abor_enable={{ "YES" if vsftpd_async_abort_enable else "NO" }}
#
# By default the server will pretend to allow ASCII mode but in fact ignore
# the request. Turn on the below options to have the server actually do ASCII
# mangling on files when in ASCII mode. The vsftpd.conf(5) man page explains
# the behaviour when these options are disabled.
# Beware that on some FTP servers, ASCII support allows a denial of service
# attack (DoS) via the command "SIZE /big/file" in ASCII mode. vsftpd
# predicted this attack and has always been safe, reporting the size of the
# raw file.
# ASCII mangling is a horrible feature of the protocol.
ascii_upload_enable={{ "YES" if vsftpd_ascii_upload_enable else "NO" }}
ascii_download_enable={{ "YES" if vsftpd_ascii_download_enable else "NO" }}
#
# You may fully customise the login banner string:
ftpd_banner={{ vsftpd_ftpd_banner }}
#
# You may specify a file of disallowed anonymous e-mail addresses. Apparently
# useful for combatting certain DoS attacks.
deny_email_enable={{ "YES" if vsftpd_deny_email_enable else "NO" }}
# (default follows)
banned_email_file={{ __vsftpd_banned_email_file }}
#
# You may specify an explicit list of local users to chroot() to their home
# directory. If chroot_local_user is YES, then this list becomes a list of
# users to NOT chroot().
# (Warning! chroot'ing can be very dangerous. If using chroot, make sure that
# the user does not have write access to the top level directory within the
# chroot)
chroot_local_user={{ "YES" if vsftpd_chroot_local_user else "NO" }}
{% if vsftpd_chroot_list | length > 0 %}
chroot_list_enable={{ "YES" if vsftpd_chroot_list_enable else "NO" }}
{% endif %}
# (default follows)
chroot_list_file={{ __vsftpd_chroot_list_file }}

{% if ansible_distribution == 'Debian' %}
secure_chroot_dir={{ __vsftpd_secure_chroot_dir }}
{% endif %}
#
# You may activate the "-R" option to the builtin ls. This is disabled by
# default to avoid remote users being able to cause excessive I/O on large
# sites. However, some broken FTP clients such as "ncftp" and "mirror" assume
# the presence of the "-R" option, so there is a strong case for enabling it.
ls_recurse_enable={{ "YES" if vsftpd_ls_recurse_enable else "NO" }}
#

{% if vsftpd_listen_ipv6 %}
listen_ipv6=YES
{% else %}
listen=YES
{% endif %}

pam_service_name={{ vsftpd_pam_service_name }}

{% if ansible_distribution == 'Debian'%}
userlist_enable={{ "YES" if vsftpd_userlist | length > 0 else "NO" }}
userlist_file={{ __vsftpd_user_list_file }}
{% endif %}


ssl_enable={{ "YES" if vsftpd_ssl_enable else "NO" }}
ssl_ciphers={{ vsftpd_ssl_ciphers | join(':') }}
rsa_cert_file={{ __vsftpd_cert_location }}
rsa_private_key_file={{ __vsftpd_private_key_location }}

pasv_enable={{ "YES" if vsftpd_pasv_enable else "NO" }}
pasv_max_port={{ vsftpd_pasv_max_port }}
pasv_min_port={{ vsftpd_pasv_min_port }}
